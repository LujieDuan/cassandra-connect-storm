version: '3'



services:
  cdc-watcher:
    container_name: cdc-watcher
    build:
      context: ./docker-context
      dockerfile: ./alpine-ssh-rsync.dockerfile
    volumes:
      - ./cassandra.yaml:/tmp/custom_cassandra/cassandra.yaml
      - ./kafkacdchandler/src/main/resources:/resources
      - ./kafkacdchandler/target:/code
      - ./ssh-key/:/ssh-key
    networks:
      default:
        ipv4_address: 172.18.0.35
    command: bash -c "echo 'Waiting for Cassandra' && sleep 20 && ssh-keygen -f ~/.ssh/id_rsa -t rsa -N '' && cat ~/.ssh/id_rsa.pub > /ssh-key/authorized_keys && sleep 100 && ssh -o StrictHostKeyChecking=no cassandra-seed-node 'exit' && echo 'ssh' && mkdir -p /var/lib/cassandra/cdc_raw && echo 'mkdir' && (while true; do sleep 60; rsync --remove-source-files -azv --inplace cassandra-seed-node:/var/lib/cassandra/cdc_raw/ /var/lib/cassandra/cdc_raw/; done &) && java -Dcassandra.config=file:///tmp/custom_cassandra/cassandra.yaml -jar /code/kafka-cdc-handler-1.0-SNAPSHOT.jar"

  # Cluster compose from: https://github.com/calvinlfer/compose-cassandra-cluster
  ##########################################################################################################
  # 3 node cluster
  # If you see exit code 137 (OOM killer) then ensure Docker has access to more resources
  cassandra-seed-node:
    container_name: cassandra-seed-node
    image: cassandra
    volumes:
      - ./cassandra.yaml:/tmp/custom_cassandra/cassandra.yaml
      - ./ssh-key/:/root/.ssh/
    environment:
      - "JVM_EXTRA_OPTS=-Dcassandra.config=/tmp/custom_cassandra/cassandra.yaml"
    entrypoint: /bin/bash 
    command: -c "apt-get update && apt-get install -y --no-install-recommends openssh-server rsync && /etc/init.d/ssh start && docker-entrypoint.sh cassandra -f"
    networks:
      default:
        ipv4_address: 172.18.0.3
    ports:
      - "9042:9042"   # Native transport, CQL
      - "7199:7199"   # JMX
      - "9160:9160"   # Thrift clients
  #    - "7000:7000"   # Intra-node communication
  #    - "7001:7001"   # TLS intra-node communication
  #  restart: always

  # cassandra-node-1:
  #   container_name: cassandra-node-1
  #   image: cassandra
  #   command: /bin/bash -c "echo 'Waiting for seed node' && sleep 30 && /docker-entrypoint.sh cassandra -f"
  #   environment:
  #     - "CASSANDRA_SEEDS=cassandra-seed-node"
  #   depends_on:
  #     - "cassandra-seed"
  #  restart: always

  # you cannot have multiple nodes join the cluster at the same time when
  # cassandra.consistent.rangemovement is true so we further delay it to give it time to stabilize
  # cassandra-node-2:
  #   container_name: cassandra-node-2
  #   image: cassandra
  #   command: /bin/bash -c "echo 'Waiting for seed node' && sleep 80 && /docker-entrypoint.sh cassandra -f"
  #   environment:
  #     - "CASSANDRA_SEEDS=cassandra-seed-node"
  #   depends_on:
  #     - "cassandra-seed"
  #  restart: always
  ##########################################################################################################

  # If you need an extra cassandra node to run cqlsh to the cassandra-seed-node
  # cassandra-cql:
  #   container_name: cassandra-cql
  #   image: cassandra
  #   depends_on:
  #     - "cassandra-seed"

  ##########################################################################################################
  # For the storm-cassandra-pulling 
  ##########################################################################################################
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always

  nimbus:
    image: storm
    container_name: nimbus
    command: bash -c "(storm logviewer -c logviewer.port='8002' &) && (storm nimbus -c logviewer.port='8002')"
    depends_on:
      - zookeeper
    links:
      - zookeeper
    restart: always
    ports:
      - 8002:8002
    volumes:
      - ./stormcassandrapulling/target:/code
      - ./stormcassandrapulling/src/main/resources:/resources

  supervisor:
    image: storm
    container_name: supervisor
    command: bash -c "(storm logviewer -c logviewer.port='8003' &) && (storm supervisor -c logviewer.port='8003')"
    depends_on:
      - nimbus
      - zookeeper
    links:
      - nimbus
      - zookeeper
    restart: always
    ports:
      - 8003:8003
    volumes:
      - ./stormcassandrapulling/src/main/resources:/resources

  stormui:
    image: storm
    container_name: stormmui
    command: storm ui
    depends_on:
      - nimbus
      - zookeeper
    links:
      - nimbus
      - zookeeper
    restart: always
    ports:
      - 8088:8080

  redisdb:
    image: redis
    container_name: redisdb
    depends_on:
      - nimbus
      - zookeeper
      - supervisor
    restart: always

  redis-browser:
    image: birkof/redis-browser
    container_name: redis-browser
    command: --url redis://redisdb:6379 -b 0.0.0.0
    depends_on:
      - redisdb
    restart: always
    ports:
      - 4567:4567

  datasource:
    image: openjdk
    container_name: datasource
    command: /bin/bash -c "echo 'Waiting for seed node' && sleep 100 && java -jar /data-source-simulator/data-source-simulator-assembly-0.1.jar"
    depends_on:
      - cassandra-seed-node
      - redisdb
    restart: always
    volumes:
      - ./data-source-simulator/target/scala-2.11:/data-source-simulator
      - ./data-source-simulator/resources/dss.yml:/resources/dss.yml

##########################################################################################################
# Kafka
##########################################################################################################
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - "KAFKA_CREATE_TOPICS=test:1:1"
      - "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181"
    depends_on:
      - zookeeper
  kafkarest:
    image: confluentinc/cp-kafka-rest
    container_name: kafkarest
    environment:
      - "KAFKA_REST_HOST_NAME=kafkarest"
      - "KAFKA_REST_LISTENERS=http://kafkarest:8082"
      - "KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:2181"
    depends_on:
      - kafka
      - zookeeper
  kafkaui: 
    image: landoop/kafka-topics-ui 
    container_name: kafkaui
    ports:
      - "8005:8000"
    environment: 
      - "KAFKA_REST_PROXY_URL=kafkarest:8082" 
      - "PROXY=true"
    depends_on:
      - kafka
      - zookeeper
##########################################################################################################

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.1/16

